//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Nomis.Blockscout.Interfaces.BlockscoutApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial interface IBlockscoutApiClient
    {
        /// <summary>
        /// search
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> SearchAsync(string? q);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> SearchAsync(string? q, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// search redirect
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultRedirect> Search_redirectAsync(string? q);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search redirect
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResultRedirect> Search_redirectAsync(string? q, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get txs
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> Get_txsAsync(string? filter, string? type, string? method);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get txs
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response2> Get_txsAsync(string? filter, string? type, string? method, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get blocks
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> Get_blocksAsync(string? type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response3> Get_blocksAsync(string? type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get main page txs
        /// </summary>
        /// <returns>txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> Get_main_page_txsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get main page txs
        /// </summary>
        /// <returns>txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> Get_main_page_txsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get main page blocks
        /// </summary>
        /// <returns>blocks</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Block>> Get_main_page_tokensAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get main page blocks
        /// </summary>
        /// <returns>blocks</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Block>> Get_main_page_tokensAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get indexing status
        /// </summary>
        /// <returns>indexing status</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndexingStatus> Get_indexing_statusAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get indexing status
        /// </summary>
        /// <returns>indexing status</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IndexingStatus> Get_indexing_statusAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get stats counters
        /// </summary>
        /// <returns>stats</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatsResponse> Get_statsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get stats counters
        /// </summary>
        /// <returns>stats</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatsResponse> Get_statsAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get txs chart
        /// </summary>
        /// <returns>tx chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> Get_txs_chartAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get txs chart
        /// </summary>
        /// <returns>tx chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response4> Get_txs_chartAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get market chart
        /// </summary>
        /// <returns>market chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> Get_market_chartAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get market chart
        /// </summary>
        /// <returns>market chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response5> Get_market_chartAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get tx info
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>tx info</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> Get_txAsync(string transaction_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tx info
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>tx info</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transaction> Get_txAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token transfers
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>token transfers</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> Get_token_transfersAsync(string transaction_hash, string? type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token transfers
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>token transfers</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response6> Get_token_transfersAsync(string transaction_hash, string? type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get internal txs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> Get_internal_txsAsync(string transaction_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get internal txs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response7> Get_internal_txsAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get logs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> Get_logsAsync(string transaction_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get logs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response8> Get_logsAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get raw trace
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>raw trace</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RawTrace>> Get_raw_traceAsync(string transaction_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get raw trace
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>raw trace</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RawTrace>> Get_raw_traceAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get state changes
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>state changes</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> Get_state_changesAsync(string transaction_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get state changes
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>state changes</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response9> Get_state_changesAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get block info
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Block> Get_blockAsync(string block_number_or_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block info
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Block> Get_blockAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get block txs
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> Get_block_txsAsync(string block_number_or_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block txs
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response10> Get_block_txsAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get block withdrawals
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block's withdrawals (pay attention that block_number together with timestamp fields is not included to response in this endpoint)</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> Get_block_withdrawalsAsync(string block_number_or_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block withdrawals
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block's withdrawals (pay attention that block_number together with timestamp fields is not included to response in this endpoint)</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response11> Get_block_withdrawalsAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get native coin holders list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> Get_addressesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get native coin holders list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response12> Get_addressesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Address> Get_addressAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Address> Get_addressAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address counters
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressCounters> Get_address_countersAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address counters
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AddressCounters> Get_address_countersAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> Get_address_txsAsync(string address_hash, string? filter);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response13> Get_address_txsAsync(string address_hash, string? filter, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> Get_address_token_transfersAsync(string address_hash, string? type, string? filter, string? token);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response14> Get_address_token_transfersAsync(string address_hash, string? type, string? filter, string? token, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address internal txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> Get_address_internal_txsAsync(string address_hash, string? filter);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address internal txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response15> Get_address_internal_txsAsync(string address_hash, string? filter, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address logs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> Get_address_logsAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address logs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response16> Get_address_logsAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> Get_address_blocks_validatedAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response17> Get_address_blocks_validatedAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenBalance>> Get_address_token_balancesAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenBalance>> Get_address_token_balancesAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> Get_address_tokensAsync(string address_hash, string? type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response18> Get_address_tokensAsync(string address_hash, string? type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address coin balance history
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> Get_address_coin_balance_historyAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address coin balance history
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response19> Get_address_coin_balance_historyAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address coin balance history by day
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CoinBalanceHistoryByDaysEntry>> Get_address_coin_balance_history_by_dayAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address coin balance history by day
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CoinBalanceHistoryByDaysEntry>> Get_address_coin_balance_history_by_dayAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get address withdrawals
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>pay attention that receiver field is not included to response in this endpoint</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> Get_address_withdrawalsAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address withdrawals
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>pay attention that receiver field is not included to response in this endpoint</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response20> Get_address_withdrawalsAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get tokens list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> Get_tokens_listAsync(string? q, string? type);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tokens list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response21> Get_tokens_listAsync(string? q, string? type, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> Get_tokenAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenInfo> Get_tokenAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> Get_token_token_transfersAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response22> Get_token_token_transfersAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> Get_token_holdersAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response23> Get_token_holdersAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenCounters> Get_token_countersAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TokenCounters> Get_token_countersAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get NFT instances
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> Get_nft_instancesAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get NFT instances
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response24> Get_nft_instancesAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get NFT instance by id
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NFTInstance> Get_nft_instanceAsync(string address_hash, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get NFT instance by id
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NFTInstance> Get_nft_instanceAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get transfers of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> Get_nft_instance_transfersAsync(string address_hash, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get transfers of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response25> Get_nft_instance_transfersAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get token instance holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> Get_token_instance_holdersAsync(string address_hash, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token instance holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response26> Get_token_instance_holdersAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get transfers count of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> Get_nft_instance_transfers_countAsync(string address_hash, int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get transfers count of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response27> Get_nft_instance_transfers_countAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get verified smart contracts
        /// </summary>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> Get_smart_contractsAsync(string? q, string? filter);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get verified smart contracts
        /// </summary>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response28> Get_smart_contractsAsync(string? q, string? filter, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get verified smart contracts counters
        /// </summary>
        /// <returns>smart contracts counters</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> Get_smart_contracts_countersAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get verified smart contracts counters
        /// </summary>
        /// <returns>smart contracts counters</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response29> Get_smart_contracts_countersAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get smart contract
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SmartContract> Get_smart_contractAsync(string address_hash);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get smart contract
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SmartContract> Get_smart_contractAsync(string address_hash, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get read methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methodsAsync(string address_hash, string? is_custom_abi, string? from);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get read methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methodsAsync(string address_hash, string? is_custom_abi, string? from, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get read methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methods_proxyAsync(string address_hash, string? is_custom_abi, string? from);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get read methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methods_proxyAsync(string address_hash, string? is_custom_abi, string? from, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get write methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methodsAsync(string address_hash, string? is_custom_abi);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get write methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methodsAsync(string address_hash, string? is_custom_abi, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get write methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methods_proxyAsync(string address_hash, string? is_custom_abi);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get write methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methods_proxyAsync(string address_hash, string? is_custom_abi, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// query read method
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodResponse>> Query_read_methodAsync(string address_hash, ReadMethodQueryBody body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// query read method
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodResponse>> Query_read_methodAsync(string address_hash, ReadMethodQueryBody body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get json rpc url
        /// </summary>
        /// <returns>json rpc url</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> Get_json_rpc_urlAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get json rpc url
        /// </summary>
        /// <returns>json rpc url</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response30> Get_json_rpc_urlAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// get withdrawals
        /// </summary>
        /// <returns>withdrawals</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> Get_withdrawalsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get withdrawals
        /// </summary>
        /// <returns>withdrawals</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response31> Get_withdrawalsAsync(System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BlockscoutApiClient : IBlockscoutApiClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public BlockscoutApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        protected virtual void PrepareRequest(System.Net.Http.HttpClient client,
            System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder)
        {
        }

        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// search
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response> SearchAsync(string? q)
        {
            return SearchAsync(q, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response> SearchAsync(string? q, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("search?");
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// search redirect
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SearchResultRedirect> Search_redirectAsync(string? q)
        {
            return Search_redirectAsync(q, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// search redirect
        /// </summary>
        /// <returns>search response</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchResultRedirect> Search_redirectAsync(string? q, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("search/check-redirect?");
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResultRedirect>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get txs
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response2> Get_txsAsync(string? filter, string? type, string? method)
        {
            return Get_txsAsync(filter, type, method, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get txs
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response2> Get_txsAsync(string? filter, string? type, string? method, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (method != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("method") + "=").Append(System.Uri.EscapeDataString(ConvertToString(method, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get blocks
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response3> Get_blocksAsync(string? type)
        {
            return Get_blocksAsync(type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks
        /// </summary>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response3> Get_blocksAsync(string? type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("blocks?");
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get main page txs
        /// </summary>
        /// <returns>txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> Get_main_page_txsAsync()
        {
            return Get_main_page_txsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get main page txs
        /// </summary>
        /// <returns>txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> Get_main_page_txsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("main-page/transactions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transaction>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get main page blocks
        /// </summary>
        /// <returns>blocks</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Block>> Get_main_page_tokensAsync()
        {
            return Get_main_page_tokensAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get main page blocks
        /// </summary>
        /// <returns>blocks</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Block>> Get_main_page_tokensAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("main-page/blocks");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Block>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get indexing status
        /// </summary>
        /// <returns>indexing status</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IndexingStatus> Get_indexing_statusAsync()
        {
            return Get_indexing_statusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get indexing status
        /// </summary>
        /// <returns>indexing status</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IndexingStatus> Get_indexing_statusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("main-page/indexing-status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IndexingStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get stats counters
        /// </summary>
        /// <returns>stats</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<StatsResponse> Get_statsAsync()
        {
            return Get_statsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get stats counters
        /// </summary>
        /// <returns>stats</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StatsResponse> Get_statsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stats");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StatsResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get txs chart
        /// </summary>
        /// <returns>tx chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response4> Get_txs_chartAsync()
        {
            return Get_txs_chartAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get txs chart
        /// </summary>
        /// <returns>tx chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response4> Get_txs_chartAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stats/charts/transactions");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get market chart
        /// </summary>
        /// <returns>market chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response5> Get_market_chartAsync()
        {
            return Get_market_chartAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get market chart
        /// </summary>
        /// <returns>market chart</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response5> Get_market_chartAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("stats/charts/market");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get tx info
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>tx info</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Transaction> Get_txAsync(string transaction_hash)
        {
            return Get_txAsync(transaction_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tx info
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>tx info</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Transaction> Get_txAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transaction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token transfers
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>token transfers</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response6> Get_token_transfersAsync(string transaction_hash, string? type)
        {
            return Get_token_transfersAsync(transaction_hash, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token transfers
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>token transfers</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response6> Get_token_transfersAsync(string transaction_hash, string? type, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}/token-transfers?");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get internal txs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response7> Get_internal_txsAsync(string transaction_hash)
        {
            return Get_internal_txsAsync(transaction_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get internal txs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response7> Get_internal_txsAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}/internal-transactions");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get logs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response8> Get_logsAsync(string transaction_hash)
        {
            return Get_logsAsync(transaction_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get logs
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>internal txs</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response8> Get_logsAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}/logs");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get raw trace
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>raw trace</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RawTrace>> Get_raw_traceAsync(string transaction_hash)
        {
            return Get_raw_traceAsync(transaction_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get raw trace
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>raw trace</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RawTrace>> Get_raw_traceAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}/raw-trace");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<RawTrace>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get state changes
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>state changes</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response9> Get_state_changesAsync(string transaction_hash)
        {
            return Get_state_changesAsync(transaction_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get state changes
        /// </summary>
        /// <param name="transaction_hash">Transaction hash</param>
        /// <returns>state changes</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response9> Get_state_changesAsync(string transaction_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (transaction_hash == null)
                throw new System.ArgumentNullException("transaction_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("transactions/{transaction_hash}/state-changes");
            urlBuilder_.Replace("{transaction_hash}", System.Uri.EscapeDataString(ConvertToString(transaction_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get block info
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Block> Get_blockAsync(string block_number_or_hash)
        {
            return Get_blockAsync(block_number_or_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block info
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Block> Get_blockAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (block_number_or_hash == null)
                throw new System.ArgumentNullException("block_number_or_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("blocks/{block_number_or_hash}");
            urlBuilder_.Replace("{block_number_or_hash}", System.Uri.EscapeDataString(ConvertToString(block_number_or_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Block>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get block txs
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response10> Get_block_txsAsync(string block_number_or_hash)
        {
            return Get_block_txsAsync(block_number_or_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block txs
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response10> Get_block_txsAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (block_number_or_hash == null)
                throw new System.ArgumentNullException("block_number_or_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("blocks/{block_number_or_hash}/transactions");
            urlBuilder_.Replace("{block_number_or_hash}", System.Uri.EscapeDataString(ConvertToString(block_number_or_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get block withdrawals
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block's withdrawals (pay attention that block_number together with timestamp fields is not included to response in this endpoint)</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response11> Get_block_withdrawalsAsync(string block_number_or_hash)
        {
            return Get_block_withdrawalsAsync(block_number_or_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get block withdrawals
        /// </summary>
        /// <param name="block_number_or_hash">Block number or hash</param>
        /// <returns>block's withdrawals (pay attention that block_number together with timestamp fields is not included to response in this endpoint)</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response11> Get_block_withdrawalsAsync(string block_number_or_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (block_number_or_hash == null)
                throw new System.ArgumentNullException("block_number_or_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("blocks/{block_number_or_hash}/withdrawals");
            urlBuilder_.Replace("{block_number_or_hash}", System.Uri.EscapeDataString(ConvertToString(block_number_or_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get native coin holders list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response12> Get_addressesAsync()
        {
            return Get_addressesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get native coin holders list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response12> Get_addressesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Address> Get_addressAsync(string address_hash)
        {
            return Get_addressAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Address> Get_addressAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Address>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address counters
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AddressCounters> Get_address_countersAsync(string address_hash)
        {
            return Get_address_countersAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address counters
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AddressCounters> Get_address_countersAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/counters");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AddressCounters>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response13> Get_address_txsAsync(string address_hash, string? filter)
        {
            return Get_address_txsAsync(address_hash, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response13> Get_address_txsAsync(string address_hash, string? filter, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/transactions?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response14> Get_address_token_transfersAsync(string address_hash, string? type, string? filter, string? token)
        {
            return Get_address_token_transfersAsync(address_hash, type, filter, token, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response14> Get_address_token_transfersAsync(string address_hash, string? type, string? filter, string? token, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/token-transfers?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (token != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("token") + "=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address internal txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response15> Get_address_internal_txsAsync(string address_hash, string? filter)
        {
            return Get_address_internal_txsAsync(address_hash, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address internal txs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response15> Get_address_internal_txsAsync(string address_hash, string? filter, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/internal-transactions?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address logs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response16> Get_address_logsAsync(string address_hash)
        {
            return Get_address_logsAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address logs
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response16> Get_address_logsAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/logs");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response17> Get_address_blocks_validatedAsync(string address_hash)
        {
            return Get_address_blocks_validatedAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response17> Get_address_blocks_validatedAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/blocks-validated");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenBalance>> Get_address_token_balancesAsync(string address_hash)
        {
            return Get_address_token_balancesAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TokenBalance>> Get_address_token_balancesAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/token-balances");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TokenBalance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response18> Get_address_tokensAsync(string address_hash, string? type)
        {
            return Get_address_tokensAsync(address_hash, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get blocks validated by address
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response18> Get_address_tokensAsync(string address_hash, string? type, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/tokens?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address coin balance history
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response19> Get_address_coin_balance_historyAsync(string address_hash)
        {
            return Get_address_coin_balance_historyAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address coin balance history
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response19> Get_address_coin_balance_historyAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/coin-balance-history");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address coin balance history by day
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CoinBalanceHistoryByDaysEntry>> Get_address_coin_balance_history_by_dayAsync(string address_hash)
        {
            return Get_address_coin_balance_history_by_dayAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address coin balance history by day
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>address</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CoinBalanceHistoryByDaysEntry>> Get_address_coin_balance_history_by_dayAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/coin-balance-history-by-day");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CoinBalanceHistoryByDaysEntry>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get address withdrawals
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>pay attention that receiver field is not included to response in this endpoint</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response20> Get_address_withdrawalsAsync(string address_hash)
        {
            return Get_address_withdrawalsAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get address withdrawals
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>pay attention that receiver field is not included to response in this endpoint</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response20> Get_address_withdrawalsAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("addresses/{address_hash}/withdrawals");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get tokens list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response21> Get_tokens_listAsync(string? q, string? type)
        {
            return Get_tokens_listAsync(q, type, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get tokens list
        /// </summary>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response21> Get_tokens_listAsync(string? q, string? type, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens?");
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenInfo> Get_tokenAsync(string address_hash)
        {
            return Get_tokenAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token info
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenInfo> Get_tokenAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response22> Get_token_token_transfersAsync(string address_hash)
        {
            return Get_token_token_transfersAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token token transfers
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response22> Get_token_token_transfersAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/transfers");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response23> Get_token_holdersAsync(string address_hash)
        {
            return Get_token_holdersAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response23> Get_token_holdersAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/holders");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TokenCounters> Get_token_countersAsync(string address_hash)
        {
            return Get_token_countersAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TokenCounters> Get_token_countersAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/counters");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TokenCounters>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get NFT instances
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response24> Get_nft_instancesAsync(string address_hash)
        {
            return Get_nft_instancesAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get NFT instances
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response24> Get_nft_instancesAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/instances");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get NFT instance by id
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<NFTInstance> Get_nft_instanceAsync(string address_hash, int id)
        {
            return Get_nft_instanceAsync(address_hash, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get NFT instance by id
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<NFTInstance> Get_nft_instanceAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/instances/{id}");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NFTInstance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get transfers of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response25> Get_nft_instance_transfersAsync(string address_hash, int id)
        {
            return Get_nft_instance_transfersAsync(address_hash, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get transfers of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response25> Get_nft_instance_transfersAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/instances/{id}/transfers");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get token instance holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response26> Get_token_instance_holdersAsync(string address_hash, int id)
        {
            return Get_token_instance_holdersAsync(address_hash, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get token instance holders
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response26> Get_token_instance_holdersAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/instances/{id}/holders");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get transfers count of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response27> Get_nft_instance_transfers_countAsync(string address_hash, int id)
        {
            return Get_nft_instance_transfers_countAsync(address_hash, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get transfers count of NFT instance
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <param name="id">integer id</param>
        /// <returns>token</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response27> Get_nft_instance_transfers_countAsync(string address_hash, int id, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("tokens/{address_hash}/instances/{id}/transfers-count");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get verified smart contracts
        /// </summary>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response28> Get_smart_contractsAsync(string? q, string? filter)
        {
            return Get_smart_contractsAsync(q, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get verified smart contracts
        /// </summary>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response28> Get_smart_contractsAsync(string? q, string? filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts?");
            if (q != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("q") + "=").Append(System.Uri.EscapeDataString(ConvertToString(q, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get verified smart contracts counters
        /// </summary>
        /// <returns>smart contracts counters</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response29> Get_smart_contracts_countersAsync()
        {
            return Get_smart_contracts_countersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get verified smart contracts counters
        /// </summary>
        /// <returns>smart contracts counters</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response29> Get_smart_contracts_countersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/counters");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get smart contract
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SmartContract> Get_smart_contractAsync(string address_hash)
        {
            return Get_smart_contractAsync(address_hash, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get smart contract
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SmartContract> Get_smart_contractAsync(string address_hash, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SmartContract>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get read methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methodsAsync(string address_hash, string? is_custom_abi, string? from)
        {
            return Get_read_methodsAsync(address_hash, is_custom_abi, from, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get read methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methodsAsync(string address_hash, string? is_custom_abi, string? from, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}/methods-read?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (is_custom_abi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("is_custom_abi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(is_custom_abi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReadMethodWithValue>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get read methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methods_proxyAsync(string address_hash, string? is_custom_abi, string? from)
        {
            return Get_read_methods_proxyAsync(address_hash, is_custom_abi, from, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get read methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodWithValue>> Get_read_methods_proxyAsync(string address_hash, string? is_custom_abi, string? from, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}/methods-read-proxy?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (is_custom_abi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("is_custom_abi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(is_custom_abi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (from != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("from") + "=").Append(System.Uri.EscapeDataString(ConvertToString(from, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReadMethodWithValue>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get write methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methodsAsync(string address_hash, string? is_custom_abi)
        {
            return Get_write_methodsAsync(address_hash, is_custom_abi, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get write methods
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methodsAsync(string address_hash, string? is_custom_abi, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}/methods-write?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (is_custom_abi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("is_custom_abi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(is_custom_abi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WriteMethod>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get write methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methods_proxyAsync(string address_hash, string? is_custom_abi)
        {
            return Get_write_methods_proxyAsync(address_hash, is_custom_abi, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get write methods proxy
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WriteMethod>> Get_write_methods_proxyAsync(string address_hash, string? is_custom_abi, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}/methods-write-proxy?");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));
            if (is_custom_abi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("is_custom_abi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(is_custom_abi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<WriteMethod>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// query read method
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodResponse>> Query_read_methodAsync(string address_hash, ReadMethodQueryBody body)
        {
            return Query_read_methodAsync(address_hash, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// query read method
        /// </summary>
        /// <param name="address_hash">Address hash</param>
        /// <returns>smart contract</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ReadMethodResponse>> Query_read_methodAsync(string address_hash, ReadMethodQueryBody body, System.Threading.CancellationToken cancellationToken)
        {
            if (address_hash == null)
                throw new System.ArgumentNullException("address_hash");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("smart-contracts/{address_hash}/query-read-method");
            urlBuilder_.Replace("{address_hash}", System.Uri.EscapeDataString(ConvertToString(address_hash, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ReadMethodResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("bad input parameter", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get json rpc url
        /// </summary>
        /// <returns>json rpc url</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response30> Get_json_rpc_urlAsync()
        {
            return Get_json_rpc_urlAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get json rpc url
        /// </summary>
        /// <returns>json rpc url</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response30> Get_json_rpc_urlAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("config/json-rpc-url");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// get withdrawals
        /// </summary>
        /// <returns>withdrawals</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Response31> Get_withdrawalsAsync()
        {
            return Get_withdrawalsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// get withdrawals
        /// </summary>
        /// <returns>withdrawals</returns>
        /// <exception cref="BlockscoutException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Response31> Get_withdrawalsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("withdrawals");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new BlockscoutException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new BlockscoutException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new BlockscoutException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new BlockscoutException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Block
    {
        [Newtonsoft.Json.JsonProperty("base_fee_per_gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base_fee_per_gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("burnt_fees")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Burnt_fees { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("burnt_fees_percentage")]
        public double Burnt_fees_percentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("difficulty")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Difficulty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("extra_data")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Extra_data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_limit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_limit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_target_percentage")]
        public double Gas_target_percentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_used")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_used { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_used_percentage")]
        public double Gas_used_percentage { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("height")]
        public int Height { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("miner")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Miner { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("nonce")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nonce { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parent_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Parent_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("priority_fee")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Priority_fee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("rewards")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Reward> Rewards { get; set; } = new System.Collections.ObjectModel.Collection<Reward>();

        [Newtonsoft.Json.JsonProperty("size")]
        public int Size { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("state_root")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string State_root { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_difficulty")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_difficulty { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_count")]
        public int Tx_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_fees")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_fees { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("uncles_hashes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Uncles_hashes { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("withdrawals_count")]
        public int Withdrawals_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenTransfer
    {
        [Newtonsoft.Json.JsonProperty("block_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Block_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam From { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("log_index")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Log_index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam To { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("token")]
        [System.ComponentModel.DataAnnotations.Required]
        public TokenInfo Token { get; set; } = new TokenInfo();

        [Newtonsoft.Json.JsonProperty("total")]
        public TotalERC20 Total { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTrace
    {
        [Newtonsoft.Json.JsonProperty("action")]
        [System.ComponentModel.DataAnnotations.Required]
        public RawTraceCallAction Action { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("subtraces")]
        public int Subtraces { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("traceAddress")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> TraceAddress { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("error")]
        public string? Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result")]
        public RawTraceCallResult Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTraceCallAction
    {
        [Newtonsoft.Json.JsonProperty("callType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("input")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Input { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTraceCreateAction
    {
        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("init")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Init { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTraceSelfDestructAction
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balance")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("refundAddress")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RefundAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTraceCallResult
    {
        [Newtonsoft.Json.JsonProperty("gasUsed")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GasUsed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("output")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Output { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class RawTraceCreateResult
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gasUsed")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GasUsed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Log
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Address { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("block_hash")]
        public string? Block_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_number")]
        public int? Block_number { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("data")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Data { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decoded")]
        [System.ComponentModel.DataAnnotations.Required]
        public DecodedInputLog Decoded { get; set; } = new DecodedInputLog();

        [Newtonsoft.Json.JsonProperty("index")]
        public int Index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("smart_contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Smart_contract { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("topics")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Topics { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("tx_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class InternalTransaction
    {
        [Newtonsoft.Json.JsonProperty("block")]
        public int Block { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("created_contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Created_contract { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam From { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("gas_limit")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_limit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("index")]
        public int Index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("success")]
        public bool Success { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam To { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("transaction_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transaction_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Fee
    {
        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Transaction
    {
        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("fee")]
        [System.ComponentModel.DataAnnotations.Required]
        public Fee Fee { get; set; } = new Fee();

        [Newtonsoft.Json.JsonProperty("gas_limit")]
        public int Gas_limit { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block")]
        public int Block { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confirmations")]
        public int Confirmations { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        public int Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam To { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("tx_burnt_fee")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_burnt_fee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("max_fee_per_gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Max_fee_per_gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Result { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_price")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_price { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("priority_fee")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Priority_fee { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("base_fee_per_gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Base_fee_per_gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam From { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("token_transfers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenTransfer> Token_transfers { get; set; } = new System.Collections.ObjectModel.Collection<TokenTransfer>();

        [Newtonsoft.Json.JsonProperty("tx_types")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Tx_types { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("gas_used")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_used { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("created_contract")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Created_contract { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("position")]
        public int Position { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("nonce")]
        public int Nonce { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_error_in_internal_txs")]
        public bool Has_error_in_internal_txs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Action> Actions { get; set; } = new System.Collections.ObjectModel.Collection<Action>();

        [Newtonsoft.Json.JsonProperty("decoded_input")]
        [System.ComponentModel.DataAnnotations.Required]
        public DecodedInput Decoded_input { get; set; } = new DecodedInput();

        [Newtonsoft.Json.JsonProperty("token_transfers_overflow")]
        public bool Token_transfers_overflow { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("raw_input")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Raw_input { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("max_priority_fee_per_gas")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Max_priority_fee_per_gas { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("revert_reason")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Revert_reason { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("confirmation_duration")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Confirmation_duration { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("tx_tag")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_tag { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ExtendedRevertReasonAsMap
    {
        [Newtonsoft.Json.JsonProperty("raw")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Raw { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("code")]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReadMethodWithValue
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReadMethodWithoutValue
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class WriteMethod
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DecodedInput
    {
        [Newtonsoft.Json.JsonProperty("method_call")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method_call { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("method_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DecodedInputParameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<DecodedInputParameter>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DecodedInputParameter
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DecodedInputLog
    {
        [Newtonsoft.Json.JsonProperty("method_call")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method_call { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("method_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("parameters")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DecodedInputLogParameter> Parameters { get; set; } = new System.Collections.ObjectModel.Collection<DecodedInputLogParameter>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class DecodedInputLogParameter
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("indexed")]
        public bool Indexed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddressParam
    {
        [Newtonsoft.Json.JsonProperty("hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("implementation_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Implementation_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_contract")]
        public bool Is_contract { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("private_tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddressTag> Private_tags { get; set; } = new System.Collections.ObjectModel.Collection<AddressTag>();

        [Newtonsoft.Json.JsonProperty("watchlist_names")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WatchlistName> Watchlist_names { get; set; } = new System.Collections.ObjectModel.Collection<WatchlistName>();

        [Newtonsoft.Json.JsonProperty("public_tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddressTag> Public_tags { get; set; } = new System.Collections.ObjectModel.Collection<AddressTag>();

        [Newtonsoft.Json.JsonProperty("is_verified")]
        public bool Is_verified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddressTag
    {
        [Newtonsoft.Json.JsonProperty("address_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("display_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Display_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class WatchlistName
    {
        [Newtonsoft.Json.JsonProperty("display_name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Display_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("label")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Address
    {
        [Newtonsoft.Json.JsonProperty("creator_address_hash")]
        public string? Creator_address_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("creation_tx_hash")]
        public string? Creation_tx_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token")]
        public TokenInfo? Token { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coin_balance")]
        public string? Coin_balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        public string? Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("implementation_address")]
        public string? Implementation_address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_number_balance_updated_at")]
        public int? Block_number_balance_updated_at { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("implementation_name")]
        public string? Implementation_name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_contract")]
        public bool? Is_contract { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("private_tags")]
        public System.Collections.Generic.ICollection<AddressTag>? Private_tags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("watchlist_names")]
        public System.Collections.Generic.ICollection<WatchlistName>? Watchlist_names { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("public_tags")]
        public System.Collections.Generic.ICollection<AddressTag>? Public_tags { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_verified")]
        public bool? Is_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_beacon_chain_withdrawals")]
        public bool? Has_beacon_chain_withdrawals { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_custom_methods_read")]
        public bool? Has_custom_methods_read { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_custom_methods_write")]
        public bool? Has_custom_methods_write { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_decompiled_code")]
        public bool? Has_decompiled_code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_logs")]
        public bool? Has_logs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_methods_read")]
        public bool? Has_methods_read { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_methods_write")]
        public bool? Has_methods_write { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_methods_read_proxy")]
        public bool? Has_methods_read_proxy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_methods_write_proxy")]
        public bool? Has_methods_write_proxy { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_token_transfers")]
        public bool? Has_token_transfers { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_tokens")]
        public bool? Has_tokens { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_validated_blocks")]
        public bool? Has_validated_blocks { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddressWithTxCount : Address
    {
        [Newtonsoft.Json.JsonProperty("tx_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_count { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Reward
    {
        [Newtonsoft.Json.JsonProperty("reward")]
        public int Reward1 { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionReward
    {
        [Newtonsoft.Json.JsonProperty("types")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Types { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("emission_reward")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Emission_reward { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Block_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam From { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("to")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam To { get; set; } = new AddressParam();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class AddressCounters
    {
        [Newtonsoft.Json.JsonProperty("transactions_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transactions_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_transfers_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_transfers_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_usage_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_usage_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("validations_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Validations_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenBalance
    {
        [Newtonsoft.Json.JsonProperty("token_instance")]
        public NFTInstance? Token_instance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token")]
        [System.ComponentModel.DataAnnotations.Required]
        public Token Token { get; set; } = new Token();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CoinBalanceHistoryEntry
    {
        [Newtonsoft.Json.JsonProperty("transaction_hash")]
        public string? Transaction_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_number")]
        public int Block_number { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Block_timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("delta")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Delta { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CoinBalanceHistoryByDaysEntry
    {
        [Newtonsoft.Json.JsonProperty("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        public double Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Token
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decimals")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Decimals { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("holders")]
        public int Holders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_supply { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TotalERC20
    {
        [Newtonsoft.Json.JsonProperty("decimals")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Decimals { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TotalERC721
    {
        [Newtonsoft.Json.JsonProperty("token_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TotalERC1155
    {
        [Newtonsoft.Json.JsonProperty("token_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decimals")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Decimals { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TotalERC1155Batch : System.Collections.ObjectModel.Collection<TotalERC1155>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Holder
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Address { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_id")]
        public string? Token_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token")]
        [System.ComponentModel.DataAnnotations.Required]
        public TokenInfo Token { get; set; } = new TokenInfo();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class NFTInstance
    {
        [Newtonsoft.Json.JsonProperty("is_unique")]
        public bool Is_unique { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("holder_address_hash")]
        public string? Holder_address_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("image_url")]
        public string? Image_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("animation_url")]
        public string? Animation_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("external_app_url")]
        public string? External_app_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("metadata")]
        public object? Metadata { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("owner")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Owner { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("token")]
        [System.ComponentModel.DataAnnotations.Required]
        public TokenInfo Token { get; set; } = new TokenInfo();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SmartContract
    {
        [Newtonsoft.Json.JsonProperty("verified_twin_address_hash")]
        public string? Verified_twin_address_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_verified")]
        public bool? Is_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_changed_bytecode")]
        public bool? Is_changed_bytecode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_partially_verified")]
        public bool? Is_partially_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_fully_verified")]
        public bool? Is_fully_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_verified_via_sourcify")]
        public bool? Is_verified_via_sourcify { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_verified_via_eth_bytecode_db")]
        public bool? Is_verified_via_eth_bytecode_db { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_vyper_contract")]
        public bool? Is_vyper_contract { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_self_destructed")]
        public bool? Is_self_destructed { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("can_be_visualized_via_sol2uml")]
        public bool? Can_be_visualized_via_sol2uml { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("minimal_proxy_address_hash")]
        public string? Minimal_proxy_address_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourcify_repo_url")]
        public string? Sourcify_repo_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("optimization_enabled")]
        public bool? Optimization_enabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("optimizations_runs")]
        public int? Optimizations_runs { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("compiler_version")]
        public string? Compiler_version { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("evm_version")]
        public string? Evm_version { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verified_at")]
        public string? Verified_at { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("abi")]
        public string? Abi { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("source_code")]
        public string? Source_code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("file_path")]
        public string? File_path { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("compiler_settings")]
        public object? Compiler_settings { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("constructor_args")]
        public string? Constructor_args { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("additional_sources")]
        public System.Collections.Generic.ICollection<ContractSource>? Additional_sources { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decoded_constructor_args")]
        public System.Collections.Generic.ICollection<ConstructorArguments>? Decoded_constructor_args { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("deployed_bytecode")]
        public string? Deployed_bytecode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("creation_bytecode")]
        public string? Creation_bytecode { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("external_libraries")]
        public System.Collections.Generic.ICollection<ExternalLibrary>? External_libraries { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language")]
        public string? Language { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ExternalLibrary
    {
        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ContractSource
    {
        [Newtonsoft.Json.JsonProperty("file_path")]
        public string? File_path { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("source_code")]
        public string? Source_code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ConstructorArguments
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenInfo
    {
        [Newtonsoft.Json.JsonProperty("circulating_market_cap")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Circulating_market_cap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("icon_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Icon_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("decimals")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Decimals { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("holders")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Holders { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_supply { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Argument
    {
        [Newtonsoft.Json.JsonProperty("name")]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        public string? Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("value")]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchResultRedirect
    {
        [Newtonsoft.Json.JsonProperty("parameter")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Parameter { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("redirect")]
        public bool Redirect { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchResultToken
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("icon_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Icon_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_smart_contract_verified")]
        public bool Is_smart_contract_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("symbol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Symbol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_url { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_supply { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchResultAddressOrContract
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_smart_contract_verified")]
        public bool Is_smart_contract_verified { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchResultBlock
    {
        [Newtonsoft.Json.JsonProperty("block_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Block_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_number")]
        public int Block_number { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SearchResultTransaction
    {
        [Newtonsoft.Json.JsonProperty("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Timestamp { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_hash")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Tx_hash { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class IndexingStatus
    {
        [Newtonsoft.Json.JsonProperty("finished_indexing")]
        public bool Finished_indexing { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("finished_indexing_blocks")]
        public bool Finished_indexing_blocks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("indexed_blocks_ratio")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Indexed_blocks_ratio { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("indexed_internal_transactions_ratio")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Indexed_internal_transactions_ratio { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class StatsResponse
    {
        [Newtonsoft.Json.JsonProperty("total_blocks")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_blocks { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_addresses")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_addresses { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_transactions")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_transactions { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("average_block_time")]
        public double Average_block_time { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("coin_price")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin_price { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_gas_used")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_gas_used { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transactions_today")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transactions_today { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_used_today")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gas_used_today { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("gas_prices")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Gas_prices { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("static_gas_price")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Static_gas_price { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("market_cap")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Market_cap { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("network_utilization_percentage")]
        public double Network_utilization_percentage { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class MarketChartItem
    {
        [Newtonsoft.Json.JsonProperty("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("closing_price")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Closing_price { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("market_cap")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Market_cap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionChartItem
    {
        [Newtonsoft.Json.JsonProperty("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_count")]
        public int Tx_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenCounters
    {
        [Newtonsoft.Json.JsonProperty("token_holders_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token_holders_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("transfers_count")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Transfers_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReadMethodQueryBody
    {
        [Newtonsoft.Json.JsonProperty("args")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Args { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        [Newtonsoft.Json.JsonProperty("method_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("from")]
        public string? From { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("contract_type")]
        public string? Contract_type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ReadMethodResponse
    {
        [Newtonsoft.Json.JsonProperty("is_error")]
        public bool Is_error { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("result")]
        [System.ComponentModel.DataAnnotations.Required]
        public ExtendedRevertReasonAsMap Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class CodeAndMessage
    {
        [Newtonsoft.Json.JsonProperty("code")]
        public int Code { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error1 { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class OutputAndNames
    {
        [Newtonsoft.Json.JsonProperty("output")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Output { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        [Newtonsoft.Json.JsonProperty("names")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<object> Names { get; set; } = new System.Collections.ObjectModel.Collection<object>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class StateChange
    {
        [Newtonsoft.Json.JsonProperty("token")]
        public TokenInfo? Token { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("is_miner")]
        public bool Is_miner { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Address { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("balance_before")]
        public string? Balance_before { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("balance_after")]
        public string? Balance_after { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("token_id")]
        public string? Token_id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("change")]
        public NFTChangesArray Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class NFTChangesArray : System.Collections.ObjectModel.Collection<NFTChange>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class NFTChange
    {
        [Newtonsoft.Json.JsonProperty("direction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Direction { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total")]
        public TotalERC721 Total { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class SmartContractForList
    {
        [Newtonsoft.Json.JsonProperty("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public AddressParam Address { get; set; } = new AddressParam();

        [Newtonsoft.Json.JsonProperty("coin_balance")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Coin_balance { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("compiler_version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Compiler_version { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("language")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("has_constructor_args")]
        public bool Has_constructor_args { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("optimization_enabled")]
        public bool Optimization_enabled { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("tx_count")]
        public int Tx_count { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verified_at")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Verified_at { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("market_cap")]
        public double? Market_cap { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Withdrawal
    {
        [Newtonsoft.Json.JsonProperty("index")]
        public int Index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("validator_index")]
        public int Validator_index { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("receiver")]
        public AddressParam? Receiver { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("block_number")]
        public int? Block_number { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("timestamp")]
        public string? Timestamp { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionAction
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionActionAaveV3BSWRF
    {
        [Newtonsoft.Json.JsonProperty("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("protocol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Protocol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionActionAaveV3EnableDisableCollateral
    {
        [Newtonsoft.Json.JsonProperty("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("protocol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Protocol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionActionUniswapV3MintNFT
    {
        [Newtonsoft.Json.JsonProperty("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("protocol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Protocol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TransactionActionUniswapV3BCS
    {
        [Newtonsoft.Json.JsonProperty("data")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Data { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("protocol")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Protocol { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SearchResultToken> Items { get; set; } = new System.Collections.ObjectModel.Collection<SearchResultToken>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Transaction> Items { get; set; } = new System.Collections.ObjectModel.Collection<Transaction>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response3
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Block> Items { get; set; } = new System.Collections.ObjectModel.Collection<Block>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response4
    {
        [Newtonsoft.Json.JsonProperty("chart_data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransactionChartItem> Chart_data { get; set; } = new System.Collections.ObjectModel.Collection<TransactionChartItem>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("available_supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Available_supply { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("chart_data")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MarketChartItem> Chart_data { get; set; } = new System.Collections.ObjectModel.Collection<MarketChartItem>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response6
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenTransfer> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenTransfer>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response7
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InternalTransaction> Items { get; set; } = new System.Collections.ObjectModel.Collection<InternalTransaction>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response8
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Log> Items { get; set; } = new System.Collections.ObjectModel.Collection<Log>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response9
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StateChange> Items { get; set; } = new System.Collections.ObjectModel.Collection<StateChange>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response10
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Transaction> Items { get; set; } = new System.Collections.ObjectModel.Collection<Transaction>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response11
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Withdrawal> Items { get; set; } = new System.Collections.ObjectModel.Collection<Withdrawal>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response12
    {
        [Newtonsoft.Json.JsonProperty("exchange_rate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Exchange_rate { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("total_supply")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Total_supply { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddressWithTxCount> Items { get; set; } = new System.Collections.ObjectModel.Collection<AddressWithTxCount>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response13
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Transaction> Items { get; set; } = new System.Collections.ObjectModel.Collection<Transaction>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response14
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenTransfer> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenTransfer>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response15
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<InternalTransaction> Items { get; set; } = new System.Collections.ObjectModel.Collection<InternalTransaction>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response16
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Log> Items { get; set; } = new System.Collections.ObjectModel.Collection<Log>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response17
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Block> Items { get; set; } = new System.Collections.ObjectModel.Collection<Block>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response18
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenBalance> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenBalance>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response19
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CoinBalanceHistoryEntry> Items { get; set; } = new System.Collections.ObjectModel.Collection<CoinBalanceHistoryEntry>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response20
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Withdrawal> Items { get; set; } = new System.Collections.ObjectModel.Collection<Withdrawal>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response21
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenInfo> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenInfo>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response22
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenTransfer> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenTransfer>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response23
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Holder> Items { get; set; } = new System.Collections.ObjectModel.Collection<Holder>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response24
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NFTInstance> Items { get; set; } = new System.Collections.ObjectModel.Collection<NFTInstance>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response25
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TokenTransfer> Items { get; set; } = new System.Collections.ObjectModel.Collection<TokenTransfer>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response26
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Holder> Items { get; set; } = new System.Collections.ObjectModel.Collection<Holder>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response27
    {
        [Newtonsoft.Json.JsonProperty("transfers_count")]
        public int Transfers_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response28
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SmartContractForList> Items { get; set; } = new System.Collections.ObjectModel.Collection<SmartContractForList>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response29
    {
        [Newtonsoft.Json.JsonProperty("new_smart_contracts_24h")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string New_smart_contracts_24h { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("new_verified_smart_contracts_24h")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string New_verified_smart_contracts_24h { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("smart_contracts")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Smart_contracts { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("verified_smart_contracts")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Verified_smart_contracts { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response30
    {
        [Newtonsoft.Json.JsonProperty("json_rpc_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Json_rpc_url { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response31
    {
        [Newtonsoft.Json.JsonProperty("items")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Withdrawal> Items { get; set; } = new System.Collections.ObjectModel.Collection<Withdrawal>();

        [Newtonsoft.Json.JsonProperty("next_page_params")]
        [System.ComponentModel.DataAnnotations.Required]
        public object Next_page_params { get; set; } = new object();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BlockscoutException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BlockscoutException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class BlockscoutException<TResult> : BlockscoutException
    {
        public TResult Result { get; private set; }

        public BlockscoutException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603