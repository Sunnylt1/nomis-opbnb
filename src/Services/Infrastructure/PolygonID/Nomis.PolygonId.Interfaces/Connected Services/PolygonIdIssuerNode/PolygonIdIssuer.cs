//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace Nomis.PolygonId.Interfaces.PolygonIdIssuerNode
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial interface IPolygonIdIssuerClient
    {
        /// <summary>
        /// Get the documentation
        /// </summary>
        /// <returns>success and returns the documentation in HTML format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetDocumentationAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the documentation
        /// </summary>
        /// <returns>success and returns the documentation in HTML format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetDocumentationAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Gets the favicon
        /// </summary>
        /// <returns>success and returns a favicon</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetFaviconAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the favicon
        /// </summary>
        /// <returns>success and returns a favicon</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetFaviconAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get the documentation yaml file
        /// </summary>
        /// <returns>success and returns the documentation in Yaml format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetYamlAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the documentation yaml file
        /// </summary>
        /// <returns>success and returns the documentation in Yaml format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetYamlAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <returns>All services are running</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, bool>> HealthAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <returns>All services are running</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, bool>> HealthAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Identity
        /// </summary>
        /// <remarks>
        /// Endpoint to create an identity
        /// </remarks>
        /// <returns>Identity created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateIdentityResponse> CreateIdentityAsync(CreateIdentityRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Identity
        /// </summary>
        /// <remarks>
        /// Endpoint to create an identity
        /// </remarks>
        /// <returns>Identity created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateIdentityResponse> CreateIdentityAsync(CreateIdentityRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Identities
        /// </summary>
        /// <remarks>
        /// Endpoint to get all the identities
        /// </remarks>
        /// <returns>all good</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetIdentitiesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Identities
        /// </summary>
        /// <remarks>
        /// Endpoint to get all the identities
        /// </remarks>
        /// <returns>all good</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetIdentitiesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Publish Identity State
        /// </summary>
        /// <remarks>
        /// Endpoint to publish identity state
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>No transactions to process to the given identity</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenericErrorMessage> PublishIdentityStateAsync(string identifier);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Publish Identity State
        /// </summary>
        /// <remarks>
        /// Endpoint to publish identity state
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>No transactions to process to the given identity</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenericErrorMessage> PublishIdentityStateAsync(string identifier, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Create Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to create a Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>Claim created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync(string identifier, CreateClaimRequest body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to create a Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>Claim created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync(string identifier, CreateClaimRequest body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Claims
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve claims 
        /// <br/>&gt; ⚠️ **self** and **subject** filter cannot be used together
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="schemaType">Filter per schema type. Example - KYCAgeCredential</param>
        /// <param name="schemaHash">Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838</param>
        /// <param name="subject">Filter per subject. Example - did:polygonid:polygon:mumbai:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ</param>
        /// <param name="revoked">Filter per claims revoked or not - Example - true.</param>
        /// <param name="self">Filter per retrieve claims of the provided identifier. Example - true</param>
        /// <param name="query_field">Filter this field inside the data of the claim</param>
        /// <param name="query_value">Filter this value inside the data of the claim for the specified field in query_field</param>
        /// <returns>Claims found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetClaimResponse>> GetClaimsAsync(string identifier, string schemaType, string schemaHash, string subject, bool? revoked, bool? self, string query_field, string query_value);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claims
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve claims 
        /// <br/>&gt; ⚠️ **self** and **subject** filter cannot be used together
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="schemaType">Filter per schema type. Example - KYCAgeCredential</param>
        /// <param name="schemaHash">Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838</param>
        /// <param name="subject">Filter per subject. Example - did:polygonid:polygon:mumbai:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ</param>
        /// <param name="revoked">Filter per claims revoked or not - Example - true.</param>
        /// <param name="self">Filter per retrieve claims of the provided identifier. Example - true</param>
        /// <param name="query_field">Filter this field inside the data of the claim</param>
        /// <param name="query_value">Filter this value inside the data of the claim for the specified field in query_field</param>
        /// <returns>Claims found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetClaimResponse>> GetClaimsAsync(string identifier, string schemaType, string schemaHash, string subject, bool? revoked, bool? self, string query_field, string query_value, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve a created Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>Claim found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetClaimResponse> GetClaimAsync(string identifier, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve a created Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>Claim found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetClaimResponse> GetClaimAsync(string identifier, string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Revoke Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to revoke a claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Accepted</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevokeClaimResponse> RevokeClaimAsync(string identifier, long nonce);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revoke Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to revoke a claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Accepted</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevokeClaimResponse> RevokeClaimAsync(string identifier, long nonce, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Revocation Status
        /// </summary>
        /// <remarks>
        /// Endpoint to get the revocation status
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Proof</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevocationStatusResponse> GetRevocationStatusAsync(string identifier, long nonce);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Revocation Status
        /// </summary>
        /// <remarks>
        /// Endpoint to get the revocation status
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Proof</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RevocationStatusResponse> GetRevocationStatusAsync(string identifier, long nonce, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Get Claim QR code
        /// </summary>
        /// <remarks>
        /// Returns a a json that can be used to create the QR Code to scan for accepting a claim.
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>ok</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetClaimQrCodeResponse> GetClaimQrCodeAsync(string identifier, string id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claim QR code
        /// </summary>
        /// <remarks>
        /// Returns a a json that can be used to create the QR Code to scan for accepting a claim.
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>ok</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetClaimQrCodeResponse> GetClaimQrCodeAsync(string identifier, string id, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Agent
        /// </summary>
        /// <remarks>
        /// Mobile agent endpoint
        /// </remarks>
        /// <returns>TBD</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentResponse> AgentAsync(string body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Agent
        /// </summary>
        /// <remarks>
        /// Mobile agent endpoint
        /// </remarks>
        /// <returns>TBD</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AgentResponse> AgentAsync(string body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PolygonIdIssuerClient : IPolygonIdIssuerClient
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PolygonIdIssuerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Get the documentation
        /// </summary>
        /// <returns>success and returns the documentation in HTML format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetDocumentationAsync()
        {
            return GetDocumentationAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the documentation
        /// </summary>
        /// <returns>success and returns the documentation in HTML format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetDocumentationAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Gets the favicon
        /// </summary>
        /// <returns>success and returns a favicon</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetFaviconAsync()
        {
            return GetFaviconAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Gets the favicon
        /// </summary>
        /// <returns>success and returns a favicon</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetFaviconAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("favicon.ico");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get the documentation yaml file
        /// </summary>
        /// <returns>success and returns the documentation in Yaml format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetYamlAsync()
        {
            return GetYamlAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the documentation yaml file
        /// </summary>
        /// <returns>success and returns the documentation in Yaml format</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetYamlAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("static/docs/api/api.yaml");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <returns>All services are running</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, bool>> HealthAsync()
        {
            return HealthAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Healthcheck
        /// </summary>
        /// <returns>All services are running</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, bool>> HealthAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("status");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, bool>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Identity
        /// </summary>
        /// <remarks>
        /// Endpoint to create an identity
        /// </remarks>
        /// <returns>Identity created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateIdentityResponse> CreateIdentityAsync(CreateIdentityRequest body)
        {
            return CreateIdentityAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Identity
        /// </summary>
        /// <remarks>
        /// Endpoint to create an identity
        /// </remarks>
        /// <returns>Identity created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateIdentityResponse> CreateIdentityAsync(CreateIdentityRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/identities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateIdentityResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<Response>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Identities
        /// </summary>
        /// <remarks>
        /// Endpoint to get all the identities
        /// </remarks>
        /// <returns>all good</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetIdentitiesAsync()
        {
            return GetIdentitiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Identities
        /// </summary>
        /// <remarks>
        /// Endpoint to get all the identities
        /// </remarks>
        /// <returns>all good</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetIdentitiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/identities");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Publish Identity State
        /// </summary>
        /// <remarks>
        /// Endpoint to publish identity state
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>No transactions to process to the given identity</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GenericErrorMessage> PublishIdentityStateAsync(string identifier)
        {
            return PublishIdentityStateAsync(identifier, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Publish Identity State
        /// </summary>
        /// <remarks>
        /// Endpoint to publish identity state
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>No transactions to process to the given identity</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GenericErrorMessage> PublishIdentityStateAsync(string identifier, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/state/publish");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PublishIdentityStateResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<PublishIdentityStateResponse>("Transaction ID of the published  state", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to create a Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>Claim created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync(string identifier, CreateClaimRequest body)
        {
            return CreateClaimAsync(identifier, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to create a Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <returns>Claim created</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreateClaimResponse> CreateClaimAsync(string identifier, CreateClaimRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateClaimResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unprocessable Content", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Claims
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve claims 
        /// <br/>&gt; ⚠️ **self** and **subject** filter cannot be used together
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="schemaType">Filter per schema type. Example - KYCAgeCredential</param>
        /// <param name="schemaHash">Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838</param>
        /// <param name="subject">Filter per subject. Example - did:polygonid:polygon:mumbai:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ</param>
        /// <param name="revoked">Filter per claims revoked or not - Example - true.</param>
        /// <param name="self">Filter per retrieve claims of the provided identifier. Example - true</param>
        /// <param name="query_field">Filter this field inside the data of the claim</param>
        /// <param name="query_value">Filter this value inside the data of the claim for the specified field in query_field</param>
        /// <returns>Claims found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetClaimResponse>> GetClaimsAsync(string identifier, string schemaType, string schemaHash, string subject, bool? revoked, bool? self, string query_field, string query_value)
        {
            return GetClaimsAsync(identifier, schemaType, schemaHash, subject, revoked, self, query_field, query_value, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claims
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve claims 
        /// <br/>&gt; ⚠️ **self** and **subject** filter cannot be used together
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="schemaType">Filter per schema type. Example - KYCAgeCredential</param>
        /// <param name="schemaHash">Filter per schema hash. Example - c9b2370371b7fa8b3dab2a5ba81b6838</param>
        /// <param name="subject">Filter per subject. Example - did:polygonid:polygon:mumbai:2qE1BZ7gcmEoP2KppvFPCZqyzyb5tK9T6Gec5HFANQ</param>
        /// <param name="revoked">Filter per claims revoked or not - Example - true.</param>
        /// <param name="self">Filter per retrieve claims of the provided identifier. Example - true</param>
        /// <param name="query_field">Filter this field inside the data of the claim</param>
        /// <param name="query_value">Filter this value inside the data of the claim for the specified field in query_field</param>
        /// <returns>Claims found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetClaimResponse>> GetClaimsAsync(string identifier, string schemaType, string schemaHash, string subject, bool? revoked, bool? self, string query_field, string query_value, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims?");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
            if (schemaType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schemaType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schemaType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (schemaHash != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("schemaHash") + "=").Append(System.Uri.EscapeDataString(ConvertToString(schemaHash, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (subject != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("subject") + "=").Append(System.Uri.EscapeDataString(ConvertToString(subject, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (revoked != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("revoked") + "=").Append(System.Uri.EscapeDataString(ConvertToString(revoked, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (self != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("self") + "=").Append(System.Uri.EscapeDataString(ConvertToString(self, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_field != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query_field") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_field, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (query_value != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("query_value") + "=").Append(System.Uri.EscapeDataString(ConvertToString(query_value, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GetClaimResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve a created Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>Claim found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetClaimResponse> GetClaimAsync(string identifier, string id)
        {
            return GetClaimAsync(identifier, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to retrieve a created Claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>Claim found</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetClaimResponse> GetClaimAsync(string identifier, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims/{id}");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetClaimResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revoke Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to revoke a claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Accepted</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RevokeClaimResponse> RevokeClaimAsync(string identifier, long nonce)
        {
            return RevokeClaimAsync(identifier, nonce, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revoke Claim
        /// </summary>
        /// <remarks>
        /// Endpoint to revoke a claim
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Accepted</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RevokeClaimResponse> RevokeClaimAsync(string identifier, long nonce, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (nonce == null)
                throw new System.ArgumentNullException("nonce");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims/revoke/{nonce}");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{nonce}", System.Uri.EscapeDataString(ConvertToString(nonce, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevokeClaimResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Revocation Status
        /// </summary>
        /// <remarks>
        /// Endpoint to get the revocation status
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Proof</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RevocationStatusResponse> GetRevocationStatusAsync(string identifier, long nonce)
        {
            return GetRevocationStatusAsync(identifier, nonce, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Revocation Status
        /// </summary>
        /// <remarks>
        /// Endpoint to get the revocation status
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="nonce">Claim nonce</param>
        /// <returns>Proof</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RevocationStatusResponse> GetRevocationStatusAsync(string identifier, long nonce, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (nonce == null)
                throw new System.ArgumentNullException("nonce");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims/revocation/status/{nonce}");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{nonce}", System.Uri.EscapeDataString(ConvertToString(nonce, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RevocationStatusResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Claim QR code
        /// </summary>
        /// <remarks>
        /// Returns a a json that can be used to create the QR Code to scan for accepting a claim.
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>ok</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<GetClaimQrCodeResponse> GetClaimQrCodeAsync(string identifier, string id)
        {
            return GetClaimQrCodeAsync(identifier, id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Claim QR code
        /// </summary>
        /// <remarks>
        /// Returns a a json that can be used to create the QR Code to scan for accepting a claim.
        /// </remarks>
        /// <param name="identifier">Issuer identifier</param>
        /// <param name="id">Claim identifier</param>
        /// <returns>ok</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<GetClaimQrCodeResponse> GetClaimQrCodeAsync(string identifier, string id, System.Threading.CancellationToken cancellationToken)
        {
            if (identifier == null)
                throw new System.ArgumentNullException("identifier");

            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/{identifier}/claims/{id}/qrcode");
            urlBuilder_.Replace("{identifier}", System.Uri.EscapeDataString(ConvertToString(identifier, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetClaimQrCodeResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Agent
        /// </summary>
        /// <remarks>
        /// Mobile agent endpoint
        /// </remarks>
        /// <returns>TBD</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AgentResponse> AgentAsync(string body)
        {
            return AgentAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Agent
        /// </summary>
        /// <remarks>
        /// Mobile agent endpoint
        /// </remarks>
        /// <returns>TBD</returns>
        /// <exception cref="PolygonIdApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AgentResponse> AgentAsync(string body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("v1/agent");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(body);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AgentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GenericErrorMessage>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new PolygonIdApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new PolygonIdApiException<GenericErrorMessage>("Internal Server error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PolygonIdApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new PolygonIdApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new PolygonIdApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Health : System.Collections.Generic.Dictionary<string, bool>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class GenericErrorMessage
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CreateIdentityRequest
    {
        [Newtonsoft.Json.JsonProperty("didMetadata", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DidMetadata DidMetadata { get; set; } = new DidMetadata();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CreateIdentityResponse
    {
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentityState State { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class IdentityState
    {
        [Newtonsoft.Json.JsonProperty("stateID", Required = Newtonsoft.Json.Required.Always)]
        public long StateID { get; set; }

        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("rootOfRoots", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootOfRoots { get; set; }

        [Newtonsoft.Json.JsonProperty("claimsTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimsTreeRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("revocationTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevocationTreeRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("blockTimestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BlockTimestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("blockNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BlockNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("txID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TxID { get; set; }

        [Newtonsoft.Json.JsonProperty("previousState", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreviousState { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("modifiedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ModifiedAt { get; set; }

        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime CreatedAt { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PublishIdentityStateResponse
    {
        [Newtonsoft.Json.JsonProperty("txID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TxID { get; set; }

        [Newtonsoft.Json.JsonProperty("claimsTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimsTreeRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("revocationTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevocationTreeRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("rootOfRoots", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootOfRoots { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CreateClaimRequest
    {
        [Newtonsoft.Json.JsonProperty("credentialSchema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CredentialSchema { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("credentialSubject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object CredentialSubject { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Version { get; set; }

        [Newtonsoft.Json.JsonProperty("revNonce", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RevNonce { get; set; }

        [Newtonsoft.Json.JsonProperty("subjectPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubjectPosition { get; set; }

        [Newtonsoft.Json.JsonProperty("merklizedRootPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerklizedRootPosition { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CreateClaimResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class GetClaimsResponse : System.Collections.ObjectModel.Collection<GetClaimResponse>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class GetClaimResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("@context", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Context { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Type { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime Expiration { get; set; }

        [Newtonsoft.Json.JsonProperty("issuanceDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime IssuanceDate { get; set; }

        [Newtonsoft.Json.JsonProperty("credentialSubject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object CredentialSubject { get; set; } = new object();

        [Newtonsoft.Json.JsonProperty("credentialStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object CredentialStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("issuer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Issuer { get; set; }

        [Newtonsoft.Json.JsonProperty("credentialSchema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CredentialSchema CredentialSchema { get; set; } = new CredentialSchema();

        [Newtonsoft.Json.JsonProperty("proof", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Proof { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class GetClaimQrCodeResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Typ { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("thid", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Thid { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Body Body { get; set; } = new Body();

        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class CredentialSchema
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class RevokeClaimResponse
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class RevocationStatusResponse
    {
        [Newtonsoft.Json.JsonProperty("issuer", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Issuer Issuer { get; set; } = new Issuer();

        [Newtonsoft.Json.JsonProperty("mtp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Mtp Mtp { get; set; } = new Mtp();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class AgentResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("typ", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Typ { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("threadID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ThreadID { get; set; }

        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Body { get; set; }

        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Response
    {
        [Newtonsoft.Json.JsonProperty("requestID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestID { get; set; }

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class DidMetadata
    {
        [Newtonsoft.Json.JsonProperty("method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Method { get; set; }

        [Newtonsoft.Json.JsonProperty("blockchain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Blockchain { get; set; }

        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Network { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Body
    {
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Credentials> Credentials { get; set; } = new System.Collections.ObjectModel.Collection<Credentials>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Issuer
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("rootOfRoots", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RootOfRoots { get; set; }

        [Newtonsoft.Json.JsonProperty("claimsTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClaimsTreeRoot { get; set; }

        [Newtonsoft.Json.JsonProperty("revocationTreeRoot", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RevocationTreeRoot { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Mtp
    {
        [Newtonsoft.Json.JsonProperty("existence", Required = Newtonsoft.Json.Required.Always)]
        public bool Existence { get; set; }

        [Newtonsoft.Json.JsonProperty("siblings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Siblings { get; set; }

        [Newtonsoft.Json.JsonProperty("node_aux", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Node_aux Node_aux { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Credentials
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class Node_aux
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PolygonIdApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PolygonIdApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.1.0))")]
    public partial class PolygonIdApiException<TResult> : PolygonIdApiException
    {
        public TResult Result { get; private set; }

        public PolygonIdApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603